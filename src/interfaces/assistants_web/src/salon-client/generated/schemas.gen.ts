// This file is auto-generated by @hey-api/openapi-ts

export const $ChatMessage = {
  properties: {
    role: {
      $ref: '#/components/schemas/ChatRole',
      title: 'One of model|user|system to identify who the message is coming from.',
    },
    message: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Contents of the chat message.',
    },
  },
  type: 'object',
  required: ['role'],
  title: 'ChatMessage',
  description:
    "A list of previous messages between the user and the model, meant to give the model conversational context for responding to the user's message.",
} as const;

export const $ChatResponseEvent = {
  properties: {
    event: {
      $ref: '#/components/schemas/StreamEvent',
      title: 'type of stream event',
    },
    data: {
      anyOf: [
        {
          $ref: '#/components/schemas/StreamStart',
        },
        {
          $ref: '#/components/schemas/StreamTextGeneration',
        },
        {
          $ref: '#/components/schemas/StreamSearchResults',
        },
        {
          $ref: '#/components/schemas/StreamEnd',
        },
      ],
      title: 'Data returned from chat response of a given event type',
    },
  },
  type: 'object',
  required: ['event', 'data'],
  title: 'ChatResponseEvent',
} as const;

export const $ChatRole = {
  type: 'string',
  enum: ['model', 'user', 'system'],
  title: 'ChatRole',
  description: 'One of model|user|system to identify who the message is coming from.',
} as const;

export const $Citation = {
  properties: {
    erklaerung: {
      type: 'string',
      title: 'Erklaerung',
      description: 'Eine Erkl√§rung, warum das Zitat relevant ist.',
    },
    text: {
      type: 'string',
      title: 'Text',
      description: 'Der eigentliche Text des Zitats.',
    },
    bewertung: {
      type: 'number',
      title: 'Bewertung',
      description: 'Die Zuversichtlichkeit des Modells, dass das Zitat korrekt ist.',
    },
  },
  type: 'object',
  required: ['erklaerung', 'text', 'bewertung'],
  title: 'Citation',
} as const;

export const $CitationList = {
  properties: {
    zitate: {
      items: {
        $ref: '#/components/schemas/Citation',
      },
      type: 'array',
      title: 'Zitate',
      description: 'Eine Liste von Zitaten, die in einem Text gefunden wurden.',
    },
  },
  type: 'object',
  required: ['zitate'],
  title: 'CitationList',
} as const;

export const $Conversation = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    user_id: {
      type: 'string',
      title: 'User Id',
    },
    agent_id: {
      type: 'string',
      title: 'Agent Id',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At',
    },
    title: {
      type: 'string',
      title: 'Title',
    },
    messages: {
      items: {
        $ref: '#/components/schemas/Message',
      },
      type: 'array',
      title: 'Messages',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
    },
    is_pinned: {
      type: 'boolean',
      title: 'Is Pinned',
    },
  },
  type: 'object',
  required: [
    'id',
    'user_id',
    'agent_id',
    'created_at',
    'updated_at',
    'title',
    'messages',
    'description',
    'is_pinned',
  ],
  title: 'Conversation',
} as const;

export const $ConversationWithoutMessages = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    user_id: {
      type: 'string',
      title: 'User Id',
    },
    agent_id: {
      type: 'string',
      title: 'Agent Id',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At',
    },
    title: {
      type: 'string',
      title: 'Title',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
    },
    is_pinned: {
      type: 'boolean',
      title: 'Is Pinned',
    },
  },
  type: 'object',
  required: [
    'id',
    'user_id',
    'agent_id',
    'created_at',
    'updated_at',
    'title',
    'description',
    'is_pinned',
  ],
  title: 'ConversationWithoutMessages',
} as const;

export const $CreateGroup = {
  properties: {
    schemas: {
      items: {
        type: 'string',
      },
      type: 'array',
      title: 'Schemas',
    },
    members: {
      items: {
        $ref: '#/components/schemas/GroupMember',
      },
      type: 'array',
      title: 'Members',
    },
    displayName: {
      type: 'string',
      title: 'Displayname',
    },
  },
  type: 'object',
  required: ['schemas', 'members', 'displayName'],
  title: 'CreateGroup',
} as const;

export const $CreateStudyRequest = {
  properties: {
    name: {
      type: 'string',
      title: 'Name',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
    },
    is_transcribed: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Is Transcribed',
      default: false,
    },
  },
  type: 'object',
  required: ['name'],
  title: 'CreateStudyRequest',
} as const;

export const $DeleteConversationResponse = {
  properties: {},
  type: 'object',
  title: 'DeleteConversationResponse',
} as const;

export const $DeleteStudy = {
  properties: {},
  type: 'object',
  title: 'DeleteStudy',
} as const;

export const $DeleteUser = {
  properties: {},
  type: 'object',
  title: 'DeleteUser',
} as const;

export const $Email = {
  properties: {
    primary: {
      type: 'boolean',
      title: 'Primary',
    },
    value: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Value',
    },
    type: {
      type: 'string',
      title: 'Type',
    },
  },
  type: 'object',
  required: ['primary', 'type'],
  title: 'Email',
} as const;

export const $GenerateTitleResponse = {
  properties: {
    title: {
      type: 'string',
      title: 'Title',
    },
    error: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Error',
    },
  },
  type: 'object',
  required: ['title'],
  title: 'GenerateTitleResponse',
} as const;

export const $Group = {
  properties: {
    schemas: {
      items: {
        type: 'string',
      },
      type: 'array',
      title: 'Schemas',
    },
    members: {
      items: {
        $ref: '#/components/schemas/GroupMember',
      },
      type: 'array',
      title: 'Members',
    },
    displayName: {
      type: 'string',
      title: 'Displayname',
    },
    id: {
      type: 'string',
      title: 'Id',
    },
    meta: {
      $ref: '#/components/schemas/Meta',
    },
  },
  type: 'object',
  required: ['schemas', 'members', 'displayName', 'id', 'meta'],
  title: 'Group',
} as const;

export const $GroupMember = {
  properties: {
    value: {
      type: 'string',
      title: 'Value',
    },
    display: {
      type: 'string',
      title: 'Display',
    },
  },
  type: 'object',
  required: ['value', 'display'],
  title: 'GroupMember',
} as const;

export const $GroupOperation = {
  properties: {
    op: {
      type: 'string',
      title: 'Op',
    },
    path: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Path',
    },
    value: {
      anyOf: [
        {
          additionalProperties: {
            type: 'string',
          },
          type: 'object',
        },
        {
          items: {
            additionalProperties: {
              type: 'string',
            },
            type: 'object',
          },
          type: 'array',
        },
      ],
      title: 'Value',
    },
  },
  type: 'object',
  required: ['op', 'value'],
  title: 'GroupOperation',
} as const;

export const $HTTPValidationError = {
  properties: {
    detail: {
      items: {
        $ref: '#/components/schemas/ValidationError',
      },
      type: 'array',
      title: 'Detail',
    },
  },
  type: 'object',
  title: 'HTTPValidationError',
} as const;

export const $Interview = {
  properties: {
    text: {
      type: 'string',
      title: 'Text',
    },
    id: {
      type: 'string',
      title: 'Id',
    },
    title: {
      type: 'string',
      title: 'Title',
    },
    interview_type: {
      type: 'string',
      title: 'Interview Type',
    },
    fields: {
      anyOf: [
        {
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Fields',
    },
    study_id: {
      type: 'string',
      title: 'Study Id',
    },
  },
  type: 'object',
  required: ['text', 'id', 'title', 'interview_type', 'study_id'],
  title: 'Interview',
} as const;

export const $JWTResponse = {
  properties: {
    token: {
      type: 'string',
      title: 'Token',
    },
  },
  type: 'object',
  required: ['token'],
  title: 'JWTResponse',
} as const;

export const $ListAuthStrategy = {
  properties: {
    strategy: {
      type: 'string',
      title: 'Strategy',
    },
    client_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Client Id',
    },
    authorization_endpoint: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Authorization Endpoint',
    },
    pkce_enabled: {
      type: 'boolean',
      title: 'Pkce Enabled',
    },
  },
  type: 'object',
  required: ['strategy', 'client_id', 'authorization_endpoint', 'pkce_enabled'],
  title: 'ListAuthStrategy',
} as const;

export const $ListGroupResponse = {
  properties: {
    totalResults: {
      type: 'integer',
      title: 'Totalresults',
    },
    startIndex: {
      type: 'integer',
      title: 'Startindex',
    },
    itemsPerPage: {
      type: 'integer',
      title: 'Itemsperpage',
    },
    Resources: {
      items: {
        $ref: '#/components/schemas/Group',
      },
      type: 'array',
      title: 'Resources',
    },
  },
  type: 'object',
  required: ['totalResults', 'startIndex', 'itemsPerPage', 'Resources'],
  title: 'ListGroupResponse',
} as const;

export const $ListUserResponse = {
  properties: {
    totalResults: {
      type: 'integer',
      title: 'Totalresults',
    },
    startIndex: {
      type: 'integer',
      title: 'Startindex',
    },
    itemsPerPage: {
      type: 'integer',
      title: 'Itemsperpage',
    },
    Resources: {
      items: {
        $ref: '#/components/schemas/backend__schemas__scim__User',
      },
      type: 'array',
      title: 'Resources',
    },
  },
  type: 'object',
  required: ['totalResults', 'startIndex', 'itemsPerPage', 'Resources'],
  title: 'ListUserResponse',
} as const;

export const $Login = {
  properties: {
    strategy: {
      type: 'string',
      title: 'Strategy',
    },
    payload: {
      anyOf: [
        {
          additionalProperties: {
            type: 'string',
          },
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Payload',
    },
  },
  type: 'object',
  required: ['strategy'],
  title: 'Login',
} as const;

export const $Logout = {
  properties: {},
  type: 'object',
  title: 'Logout',
} as const;

export const $Message = {
  properties: {
    text: {
      type: 'string',
      title: 'Text',
    },
    id: {
      type: 'string',
      title: 'Id',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At',
    },
    generation_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Generation Id',
    },
    position: {
      type: 'integer',
      title: 'Position',
    },
    is_active: {
      type: 'boolean',
      title: 'Is Active',
    },
    agent: {
      $ref: '#/components/schemas/MessageAgent',
    },
  },
  type: 'object',
  required: [
    'text',
    'id',
    'created_at',
    'updated_at',
    'generation_id',
    'position',
    'is_active',
    'agent',
  ],
  title: 'Message',
} as const;

export const $MessageAgent = {
  type: 'string',
  enum: ['USER', 'CHATBOT'],
  title: 'MessageAgent',
} as const;

export const $Meta = {
  properties: {
    resourceType: {
      type: 'string',
      title: 'Resourcetype',
    },
    created: {
      type: 'string',
      title: 'Created',
    },
    lastModified: {
      type: 'string',
      title: 'Lastmodified',
    },
  },
  type: 'object',
  required: ['resourceType', 'created', 'lastModified'],
  title: 'Meta',
} as const;

export const $Name = {
  properties: {
    givenName: {
      type: 'string',
      title: 'Givenname',
    },
    familyName: {
      type: 'string',
      title: 'Familyname',
    },
  },
  type: 'object',
  required: ['givenName', 'familyName'],
  title: 'Name',
} as const;

export const $Operation = {
  properties: {
    op: {
      type: 'string',
      title: 'Op',
    },
    value: {
      additionalProperties: {
        type: 'boolean',
      },
      type: 'object',
      title: 'Value',
    },
  },
  type: 'object',
  required: ['op', 'value'],
  title: 'Operation',
} as const;

export const $PatchGroup = {
  properties: {
    schemas: {
      items: {
        type: 'string',
      },
      type: 'array',
      title: 'Schemas',
    },
    operations: {
      items: {
        $ref: '#/components/schemas/GroupOperation',
      },
      type: 'array',
      title: 'Operations',
    },
  },
  type: 'object',
  required: ['schemas', 'operations'],
  title: 'PatchGroup',
} as const;

export const $PatchUser = {
  properties: {
    schemas: {
      items: {
        type: 'string',
      },
      type: 'array',
      title: 'Schemas',
    },
    operations: {
      items: {
        $ref: '#/components/schemas/Operation',
      },
      type: 'array',
      title: 'Operations',
    },
  },
  type: 'object',
  required: ['schemas', 'operations'],
  title: 'PatchUser',
} as const;

export const $SalonChatRequest = {
  properties: {
    user_id: {
      type: 'string',
      title: 'A user id to store to store the conversation under.',
    },
    agent_id: {
      type: 'string',
      title:
        'The agent_id to use for the chat request. This allows us to construct the correct system prompt.',
    },
    message: {
      type: 'string',
      title: 'The message to send to the chatbot.',
    },
    chat_history: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/ChatMessage',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title:
        'A list of entries used to construct the conversation. If provided, these messages will be used to build the prompt and the conversation_id will be ignored so no data will be stored to maintain state.',
    },
    conversation_id: {
      type: 'string',
      title:
        'To store a conversation then create a conversation id and use it for every related request',
    },
    study_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'The study_id to use for the chat request.',
    },
    interview_ids: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'The interview_ids that should be searched.',
    },
    interviews: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/Interview',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'The interviews that should be searched.',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description of the user to simulate.',
    },
  },
  type: 'object',
  required: ['user_id', 'agent_id', 'message'],
  title: 'SalonChatRequest',
} as const;

export const $StreamEnd = {
  properties: {
    message_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Message Id',
    },
    response_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Response Id',
    },
    generation_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Generation Id',
    },
    conversation_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Conversation Id',
    },
    text: {
      type: 'string',
      title: 'Contents of the chat message.',
    },
    search_results: {
      anyOf: [
        {
          additionalProperties: {
            $ref: '#/components/schemas/CitationList',
          },
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Search results found in the interviews',
    },
    finish_reason: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'The finish reason',
    },
    chat_history: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/ChatMessage',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title:
        'A list of entries used to construct the conversation. If provided, these messages will be used to build the prompt and the conversation_id will be ignored so no data will be stored to maintain state.',
    },
    error: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Error message if the response is an error.',
    },
  },
  type: 'object',
  required: ['text'],
  title: 'StreamEnd',
} as const;

export const $StreamEvent = {
  type: 'string',
  enum: ['stream-start', 'search-results', 'text-generation', 'stream-end'],
  title: 'StreamEvent',
  description: "Stream Events returned by Cohere's chat stream response.",
} as const;

export const $StreamSearchResults = {
  properties: {
    search_results: {
      $ref: '#/components/schemas/CitationList',
      title: 'Search results found in the interview',
    },
    interview_id: {
      type: 'string',
      title: 'The id of the interview in which was searched',
    },
  },
  type: 'object',
  required: ['search_results', 'interview_id'],
  title: 'StreamSearchResults',
} as const;

export const $StreamStart = {
  properties: {
    generation_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Generation Id',
    },
    conversation_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Conversation Id',
    },
  },
  type: 'object',
  title: 'StreamStart',
  description: 'Stream start event.',
} as const;

export const $StreamTextGeneration = {
  properties: {
    text: {
      type: 'string',
      title: 'Contents of the chat message.',
    },
  },
  type: 'object',
  required: ['text'],
  title: 'StreamTextGeneration',
  description: 'Stream text generation event.',
} as const;

export const $Study = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At',
    },
    name: {
      type: 'string',
      title: 'Name',
    },
    is_transcribed: {
      type: 'boolean',
      title: 'Is Transcribed',
      default: false,
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
    },
  },
  type: 'object',
  required: ['id', 'created_at', 'updated_at', 'name'],
  title: 'Study',
} as const;

export const $ToggleConversationPinRequest = {
  properties: {
    is_pinned: {
      type: 'boolean',
      title: 'Is Pinned',
    },
  },
  type: 'object',
  required: ['is_pinned'],
  title: 'ToggleConversationPinRequest',
} as const;

export const $UpdateConversationRequest = {
  properties: {
    title: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Title',
    },
    user_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'User Id',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
    },
  },
  type: 'object',
  title: 'UpdateConversationRequest',
} as const;

export const $UpdateStudyRequest = {
  properties: {
    name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Name',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
    },
    is_transcribed: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Is Transcribed',
      default: false,
    },
  },
  type: 'object',
  title: 'UpdateStudyRequest',
} as const;

export const $ValidationError = {
  properties: {
    loc: {
      items: {
        anyOf: [
          {
            type: 'string',
          },
          {
            type: 'integer',
          },
        ],
      },
      type: 'array',
      title: 'Location',
    },
    msg: {
      type: 'string',
      title: 'Message',
    },
    type: {
      type: 'string',
      title: 'Error Type',
    },
  },
  type: 'object',
  required: ['loc', 'msg', 'type'],
  title: 'ValidationError',
} as const;

export const $backend__schemas__scim__CreateUser = {
  properties: {
    userName: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Username',
    },
    active: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Active',
    },
    schemas: {
      items: {
        type: 'string',
      },
      type: 'array',
      title: 'Schemas',
    },
    name: {
      $ref: '#/components/schemas/Name',
    },
    emails: {
      items: {
        $ref: '#/components/schemas/Email',
      },
      type: 'array',
      title: 'Emails',
    },
    externalId: {
      type: 'string',
      title: 'Externalid',
    },
  },
  type: 'object',
  required: ['userName', 'active', 'schemas', 'name', 'emails', 'externalId'],
  title: 'CreateUser',
} as const;

export const $backend__schemas__scim__UpdateUser = {
  properties: {
    userName: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Username',
    },
    active: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Active',
    },
    schemas: {
      items: {
        type: 'string',
      },
      type: 'array',
      title: 'Schemas',
    },
    emails: {
      items: {
        $ref: '#/components/schemas/Email',
      },
      type: 'array',
      title: 'Emails',
    },
    name: {
      $ref: '#/components/schemas/Name',
    },
  },
  type: 'object',
  required: ['userName', 'active', 'schemas', 'emails', 'name'],
  title: 'UpdateUser',
} as const;

export const $backend__schemas__scim__User = {
  properties: {
    userName: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Username',
    },
    active: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Active',
    },
    schemas: {
      items: {
        type: 'string',
      },
      type: 'array',
      title: 'Schemas',
    },
    id: {
      type: 'string',
      title: 'Id',
    },
    externalId: {
      type: 'string',
      title: 'Externalid',
    },
    meta: {
      $ref: '#/components/schemas/Meta',
    },
  },
  type: 'object',
  required: ['userName', 'active', 'schemas', 'id', 'externalId', 'meta'],
  title: 'User',
} as const;

export const $backend__schemas__user__CreateUser = {
  properties: {
    password: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Password',
    },
    hashed_password: {
      anyOf: [
        {
          type: 'string',
          format: 'binary',
        },
        {
          type: 'null',
        },
      ],
      title: 'Hashed Password',
    },
    fullname: {
      type: 'string',
      title: 'Fullname',
    },
    email: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Email',
    },
  },
  type: 'object',
  required: ['fullname'],
  title: 'CreateUser',
} as const;

export const $backend__schemas__user__UpdateUser = {
  properties: {
    password: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Password',
    },
    hashed_password: {
      anyOf: [
        {
          type: 'string',
          format: 'binary',
        },
        {
          type: 'null',
        },
      ],
      title: 'Hashed Password',
    },
    fullname: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Fullname',
    },
    email: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Email',
    },
  },
  type: 'object',
  title: 'UpdateUser',
} as const;

export const $backend__schemas__user__User = {
  properties: {
    fullname: {
      type: 'string',
      title: 'Fullname',
    },
    email: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Email',
    },
    id: {
      type: 'string',
      title: 'Id',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At',
    },
  },
  type: 'object',
  required: ['fullname', 'id', 'created_at', 'updated_at'],
  title: 'User',
} as const;
