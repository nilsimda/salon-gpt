// This file is auto-generated by @hey-api/openapi-ts

/**
 * A list of previous messages between the user and the model, meant to give the model conversational context for responding to the user's message.
 */
export type ChatMessage = {
  role: ChatRole;
  message?: string | null;
};

/**
 * One of model|user|system to identify who the message is coming from.
 */
export enum ChatRole {
  MODEL = 'model',
  USER = 'user',
  SYSTEM = 'system',
}

export type Conversation = {
  id: string;
  user_id: string;
  agent_id: string;
  created_at: string;
  updated_at: string;
  title: string;
  messages: Array<Message>;
  description: string | null;
  is_pinned: boolean;
};

export type ConversationWithoutMessages = {
  id: string;
  user_id: string;
  agent_id: string;
  created_at: string;
  updated_at: string;
  title: string;
  description: string | null;
  is_pinned: boolean;
};

export type CreateGroup = {
  schemas: Array<string>;
  members: Array<GroupMember>;
  displayName: string;
};

export type CreateStudyRequest = {
  name: string;
  description?: string | null;
  is_transcribed?: boolean | null;
};

export type DeleteConversationResponse = unknown;

export type DeleteStudy = unknown;

export type DeleteUser = unknown;

export type Email = {
  primary: boolean;
  value?: string | null;
  type: string;
};

export type GenerateTitleResponse = {
  title: string;
  error?: string | null;
};

export type Group = {
  schemas: Array<string>;
  members: Array<GroupMember>;
  displayName: string;
  id: string;
  meta: Meta;
};

export type GroupMember = {
  value: string;
  display: string;
};

export type GroupOperation = {
  op: string;
  path?: string | null;
  value:
    | {
        [key: string]: string;
      }
    | Array<{
        [key: string]: string;
      }>;
};

export type HTTPValidationError = {
  detail?: Array<ValidationError>;
};

export type Interview = {
  text: string;
  id: string;
  title: string;
  interview_type: string;
  fields?: {
    [key: string]: unknown;
  } | null;
  study_id: string;
};

export type JWTResponse = {
  token: string;
};

export type ListAuthStrategy = {
  strategy: string;
  client_id: string | null;
  authorization_endpoint: string | null;
  pkce_enabled: boolean;
};

export type ListGroupResponse = {
  totalResults: number;
  startIndex: number;
  itemsPerPage: number;
  Resources: Array<Group>;
};

export type ListUserResponse = {
  totalResults: number;
  startIndex: number;
  itemsPerPage: number;
  Resources: Array<backend__schemas__scim__User>;
};

export type Login = {
  strategy: string;
  payload?: {
    [key: string]: string;
  } | null;
};

export type Logout = unknown;

export type Message = {
  text: string;
  id: string;
  created_at: string;
  updated_at: string;
  generation_id: string | null;
  position: number;
  is_active: boolean;
  agent: MessageAgent;
};

export enum MessageAgent {
  USER = 'USER',
  CHATBOT = 'CHATBOT',
}

export type Meta = {
  resourceType: string;
  created: string;
  lastModified: string;
};

export type Name = {
  givenName: string;
  familyName: string;
};

export type Operation = {
  op: string;
  value: {
    [key: string]: boolean;
  };
};

export type PatchGroup = {
  schemas: Array<string>;
  operations: Array<GroupOperation>;
};

export type PatchUser = {
  schemas: Array<string>;
  operations: Array<Operation>;
};

export type SalonChatRequest = {
  user_id: string;
  agent_id: string;
  message: string;
  chat_history?: Array<ChatMessage> | null;
  conversation_id?: string;
  study_id?: string | null;
  interview_ids?: Array<string> | null;
  interviews?: Array<Interview> | null;
  description?: string | null;
};

export type Study = {
  id: string;
  created_at: string;
  updated_at: string;
  name: string;
  is_transcribed?: boolean;
  description?: string | null;
};

export type ToggleConversationPinRequest = {
  is_pinned: boolean;
};

export type UpdateConversationRequest = {
  title?: string | null;
  user_id?: string | null;
  description?: string | null;
};

export type UpdateStudyRequest = {
  name?: string | null;
  description?: string | null;
  is_transcribed?: boolean | null;
};

export type ValidationError = {
  loc: Array<string | number>;
  msg: string;
  type: string;
};

export type backend__schemas__scim__CreateUser = {
  userName: string | null;
  active: boolean | null;
  schemas: Array<string>;
  name: Name;
  emails: Array<Email>;
  externalId: string;
};

export type backend__schemas__scim__UpdateUser = {
  userName: string | null;
  active: boolean | null;
  schemas: Array<string>;
  emails: Array<Email>;
  name: Name;
};

export type backend__schemas__scim__User = {
  userName: string | null;
  active: boolean | null;
  schemas: Array<string>;
  id: string;
  externalId: string;
  meta: Meta;
};

export type backend__schemas__user__CreateUser = {
  password?: string | null;
  hashed_password?: (Blob | File) | null;
  fullname: string;
  email?: string | null;
};

export type backend__schemas__user__UpdateUser = {
  password?: string | null;
  hashed_password?: (Blob | File) | null;
  fullname?: string | null;
  email?: string | null;
};

export type backend__schemas__user__User = {
  fullname: string;
  email?: string | null;
  id: string;
  created_at: string;
  updated_at: string;
};

export type GetStrategiesV1AuthStrategiesGetResponse = Array<ListAuthStrategy>;

export type LoginV1LoginPostData = {
  requestBody: Login;
};

export type LoginV1LoginPostResponse = JWTResponse | null;

export type AuthorizeV1StrategyAuthPostData = {
  code?: string;
  strategy: string;
};

export type AuthorizeV1StrategyAuthPostResponse = JWTResponse;

export type LogoutV1LogoutGetResponse = Logout;

export type ChatStreamV1ChatStreamPostData = {
  requestBody: SalonChatRequest;
};

export type ChatStreamV1ChatStreamPostResponse = unknown;

export type CreateUserV1UsersPostData = {
  requestBody: backend__schemas__user__CreateUser;
};

export type CreateUserV1UsersPostResponse = backend__schemas__user__User;

export type ListUsersV1UsersGetData = {
  limit?: number;
  offset?: number;
};

export type ListUsersV1UsersGetResponse = Array<backend__schemas__user__User>;

export type GetUserV1UsersUserIdGetData = {
  userId: string;
};

export type GetUserV1UsersUserIdGetResponse = backend__schemas__user__User;

export type UpdateUserV1UsersUserIdPutData = {
  requestBody: backend__schemas__user__UpdateUser;
  userId: string;
};

export type UpdateUserV1UsersUserIdPutResponse = backend__schemas__user__User;

export type DeleteUserV1UsersUserIdDeleteData = {
  userId: string;
};

export type DeleteUserV1UsersUserIdDeleteResponse = DeleteUser;

export type GetConversationV1ConversationsConversationIdGetData = {
  conversationId: string;
  userId: string;
};

export type GetConversationV1ConversationsConversationIdGetResponse = Conversation;

export type UpdateConversationV1ConversationsConversationIdPutData = {
  conversationId: string;
  requestBody: UpdateConversationRequest;
  userId: string;
};

export type UpdateConversationV1ConversationsConversationIdPutResponse = Conversation;

export type DeleteConversationV1ConversationsConversationIdDeleteData = {
  conversationId: string;
  userId: string;
};

export type DeleteConversationV1ConversationsConversationIdDeleteResponse =
  DeleteConversationResponse;

export type ListConversationsV1ConversationsGetData = {
  agentId?: string | null;
  limit?: number;
  offset?: number;
  orderBy?: string | null;
  userId: string;
};

export type ListConversationsV1ConversationsGetResponse = Array<ConversationWithoutMessages>;

export type ToggleConversationPinV1ConversationsConversationIdTogglePinPutData = {
  conversationId: string;
  requestBody: ToggleConversationPinRequest;
  userId: string;
};

export type ToggleConversationPinV1ConversationsConversationIdTogglePinPutResponse =
  ConversationWithoutMessages;

export type SearchConversationsV1ConversationsSearchGetData = {
  agentId?: string | null;
  limit?: number;
  offset?: number;
  query: string;
  userId: string;
};

export type SearchConversationsV1ConversationsSearchGetResponse =
  Array<ConversationWithoutMessages>;

export type GenerateTitleV1ConversationsConversationIdGenerateTitlePostData = {
  conversationId: string;
  userId: string;
};

export type GenerateTitleV1ConversationsConversationIdGenerateTitlePostResponse =
  GenerateTitleResponse;

export type CreateStudyV1StudiesPostData = {
  requestBody: CreateStudyRequest;
};

export type CreateStudyV1StudiesPostResponse = Study;

export type ListStudiesV1StudiesGetData = {
  limit?: number;
  offset?: number;
  organizationId?: string | null;
};

export type ListStudiesV1StudiesGetResponse = Array<Study>;

export type GetStudyByIdV1StudiesStudyIdGetData = {
  studyId: string;
};

export type GetStudyByIdV1StudiesStudyIdGetResponse = Study;

export type UpdateStudyV1StudiesStudyIdPutData = {
  requestBody: UpdateStudyRequest;
  studyId: string;
};

export type UpdateStudyV1StudiesStudyIdPutResponse = Study;

export type DeleteStudyV1StudiesStudyIdDeleteData = {
  studyId: string;
};

export type DeleteStudyV1StudiesStudyIdDeleteResponse = DeleteStudy;

export type ListFilesV1StudiesStudyIdInterviewsGetData = {
  studyId: string;
};

export type ListFilesV1StudiesStudyIdInterviewsGetResponse = Array<Interview>;

export type GetUsersScimV2UsersGetData = {
  count?: number;
  filter?: string | null;
  startIndex?: number;
};

export type GetUsersScimV2UsersGetResponse = ListUserResponse;

export type CreateUserScimV2UsersPostData = {
  requestBody: backend__schemas__scim__CreateUser;
};

export type CreateUserScimV2UsersPostResponse = backend__schemas__scim__User;

export type GetUserScimV2UsersUserIdGetData = {
  userId: string;
};

export type GetUserScimV2UsersUserIdGetResponse = backend__schemas__scim__User;

export type UpdateUserScimV2UsersUserIdPutData = {
  requestBody: backend__schemas__scim__UpdateUser;
  userId: string;
};

export type UpdateUserScimV2UsersUserIdPutResponse = backend__schemas__scim__User;

export type PatchUserScimV2UsersUserIdPatchData = {
  requestBody: PatchUser;
  userId: string;
};

export type PatchUserScimV2UsersUserIdPatchResponse = backend__schemas__scim__User;

export type GetGroupsScimV2GroupsGetData = {
  count?: number;
  filter?: string | null;
  startIndex?: number;
};

export type GetGroupsScimV2GroupsGetResponse = ListGroupResponse;

export type CreateGroupScimV2GroupsPostData = {
  requestBody: CreateGroup;
};

export type CreateGroupScimV2GroupsPostResponse = Group;

export type GetGroupScimV2GroupsGroupIdGetData = {
  groupId: string;
};

export type GetGroupScimV2GroupsGroupIdGetResponse = Group;

export type PatchGroupScimV2GroupsGroupIdPatchData = {
  groupId: string;
  requestBody: PatchGroup;
};

export type PatchGroupScimV2GroupsGroupIdPatchResponse = Group;

export type DeleteGroupScimV2GroupsGroupIdDeleteData = {
  groupId: string;
};

export type DeleteGroupScimV2GroupsGroupIdDeleteResponse = void;

export type HealthHealthGetResponse = unknown;

export type ApplyMigrationsMigratePostResponse = unknown;

export type $OpenApiTs = {
  '/v1/auth_strategies': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<ListAuthStrategy>;
      };
    };
  };
  '/v1/login': {
    post: {
      req: LoginV1LoginPostData;
      res: {
        /**
         * Successful Response
         */
        200: JWTResponse | null;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/{strategy}/auth': {
    post: {
      req: AuthorizeV1StrategyAuthPostData;
      res: {
        /**
         * Successful Response
         */
        200: JWTResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/logout': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Logout;
      };
    };
  };
  '/v1/chat-stream': {
    post: {
      req: ChatStreamV1ChatStreamPostData;
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/users': {
    post: {
      req: CreateUserV1UsersPostData;
      res: {
        /**
         * Successful Response
         */
        200: backend__schemas__user__User;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    get: {
      req: ListUsersV1UsersGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<backend__schemas__user__User>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/users/{user_id}': {
    get: {
      req: GetUserV1UsersUserIdGetData;
      res: {
        /**
         * Successful Response
         */
        200: backend__schemas__user__User;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    put: {
      req: UpdateUserV1UsersUserIdPutData;
      res: {
        /**
         * Successful Response
         */
        200: backend__schemas__user__User;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: DeleteUserV1UsersUserIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: DeleteUser;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/conversations/{conversation_id}': {
    get: {
      req: GetConversationV1ConversationsConversationIdGetData;
      res: {
        /**
         * Successful Response
         */
        200: Conversation;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    put: {
      req: UpdateConversationV1ConversationsConversationIdPutData;
      res: {
        /**
         * Successful Response
         */
        200: Conversation;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: DeleteConversationV1ConversationsConversationIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: DeleteConversationResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/conversations': {
    get: {
      req: ListConversationsV1ConversationsGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<ConversationWithoutMessages>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/conversations/{conversation_id}/toggle-pin': {
    put: {
      req: ToggleConversationPinV1ConversationsConversationIdTogglePinPutData;
      res: {
        /**
         * Successful Response
         */
        200: ConversationWithoutMessages;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/conversations:search': {
    get: {
      req: SearchConversationsV1ConversationsSearchGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<ConversationWithoutMessages>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/conversations/{conversation_id}/generate-title': {
    post: {
      req: GenerateTitleV1ConversationsConversationIdGenerateTitlePostData;
      res: {
        /**
         * Successful Response
         */
        200: GenerateTitleResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/studies': {
    post: {
      req: CreateStudyV1StudiesPostData;
      res: {
        /**
         * Successful Response
         */
        200: Study;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    get: {
      req: ListStudiesV1StudiesGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<Study>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/studies/{study_id}': {
    get: {
      req: GetStudyByIdV1StudiesStudyIdGetData;
      res: {
        /**
         * Successful Response
         */
        200: Study;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    put: {
      req: UpdateStudyV1StudiesStudyIdPutData;
      res: {
        /**
         * Successful Response
         */
        200: Study;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: DeleteStudyV1StudiesStudyIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: DeleteStudy;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/studies/{study_id}/interviews': {
    get: {
      req: ListFilesV1StudiesStudyIdInterviewsGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<Interview>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/scim/v2/Users': {
    get: {
      req: GetUsersScimV2UsersGetData;
      res: {
        /**
         * Successful Response
         */
        200: ListUserResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    post: {
      req: CreateUserScimV2UsersPostData;
      res: {
        /**
         * Successful Response
         */
        201: backend__schemas__scim__User;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/scim/v2/Users/{user_id}': {
    get: {
      req: GetUserScimV2UsersUserIdGetData;
      res: {
        /**
         * Successful Response
         */
        200: backend__schemas__scim__User;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    put: {
      req: UpdateUserScimV2UsersUserIdPutData;
      res: {
        /**
         * Successful Response
         */
        200: backend__schemas__scim__User;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    patch: {
      req: PatchUserScimV2UsersUserIdPatchData;
      res: {
        /**
         * Successful Response
         */
        200: backend__schemas__scim__User;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/scim/v2/Groups': {
    get: {
      req: GetGroupsScimV2GroupsGetData;
      res: {
        /**
         * Successful Response
         */
        200: ListGroupResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    post: {
      req: CreateGroupScimV2GroupsPostData;
      res: {
        /**
         * Successful Response
         */
        201: Group;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/scim/v2/Groups/{group_id}': {
    get: {
      req: GetGroupScimV2GroupsGroupIdGetData;
      res: {
        /**
         * Successful Response
         */
        200: Group;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    patch: {
      req: PatchGroupScimV2GroupsGroupIdPatchData;
      res: {
        /**
         * Successful Response
         */
        200: Group;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: DeleteGroupScimV2GroupsGroupIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        204: void;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/health': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: unknown;
      };
    };
  };
  '/migrate': {
    post: {
      res: {
        /**
         * Successful Response
         */
        200: unknown;
      };
    };
  };
};
