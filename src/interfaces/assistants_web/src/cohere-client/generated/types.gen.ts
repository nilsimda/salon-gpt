// This file is auto-generated by @hey-api/openapi-ts

export type AgentPublic = {
    user_id: string;
    id: string;
    created_at: string;
    updated_at: string;
    version: number;
    name: string;
    description: (string | null);
    preamble: (string | null);
    temperature: number;
    tools: (Array<(string)> | null);
    tools_metadata?: (Array<AgentToolMetadataPublic> | null);
    deployments: Array<DeploymentWithModels>;
    deployment: (string | null);
    model: (string | null);
    is_private: (boolean | null);
};

export type AgentToolMetadata = {
    id: string;
    created_at: string;
    updated_at: string;
    user_id: (string | null);
    agent_id: string;
    tool_name: string;
    artifacts: Array<{
        [key: string]: unknown;
    }>;
};

export type AgentToolMetadataPublic = {
    id: string;
    created_at: string;
    updated_at: string;
    agent_id: string;
    tool_name: string;
    artifacts: Array<{
        [key: string]: unknown;
    }>;
};

export type AgentVisibility = 'private' | 'public' | 'all';

export type backend__schemas__scim__CreateUser = {
    userName: (string | null);
    active: (boolean | null);
    schemas: Array<(string)>;
    name: Name;
    emails: Array<Email>;
    externalId: string;
};

export type backend__schemas__scim__UpdateUser = {
    userName: (string | null);
    active: (boolean | null);
    schemas: Array<(string)>;
    emails: Array<Email>;
    name: Name;
};

export type backend__schemas__scim__User = {
    userName: (string | null);
    active: (boolean | null);
    schemas: Array<(string)>;
    id: string;
    externalId: string;
    meta: Meta;
};

export type backend__schemas__user__CreateUser = {
    password?: (string | null);
    hashed_password?: ((Blob | File) | null);
    fullname: string;
    email?: (string | null);
};

export type backend__schemas__user__UpdateUser = {
    password?: (string | null);
    hashed_password?: ((Blob | File) | null);
    fullname?: (string | null);
    email?: (string | null);
};

export type backend__schemas__user__User = {
    fullname: string;
    email?: (string | null);
    id: string;
    created_at: string;
    updated_at: string;
};

export type Body_batch_upload_file_v1_agents_batch_upload_file_post = {
    files: Array<((Blob | File))>;
};

export type Body_batch_upload_file_v1_conversations_batch_upload_file_post = {
    conversation_id?: string;
    files: Array<((Blob | File))>;
};

export type Category = 'Data loader' | 'File loader' | 'Function' | 'Web search';

/**
 * A list of previous messages between the user and the model, meant to give the model conversational context for responding to the user's message.
 */
export type ChatMessage = {
    role: ChatRole;
    message?: (string | null);
    tool_plan?: (string | null);
    tool_results?: (Array<{
    [key: string]: unknown;
}> | null);
    tool_calls?: (Array<{
    [key: string]: unknown;
}> | null);
};

export type ChatResponseEvent = {
    event: StreamEvent;
    data: (StreamStart | StreamTextGeneration | StreamCitationGeneration | StreamQueryGeneration | StreamSearchResults | StreamEnd | StreamToolInput | StreamToolResult | StreamSearchQueriesGeneration | StreamToolCallsGeneration | StreamToolCallsChunk | NonStreamedChatResponse);
};

/**
 * One of CHATBOT|USER|SYSTEM to identify who the message is coming from.
 */
export type ChatRole = 'CHATBOT' | 'USER' | 'SYSTEM' | 'TOOL';

export type Citation = {
    text: string;
    start: number;
    end: number;
    document_ids: Array<(string)>;
};

/**
 * Dictates how the prompt will be constructed. Defaults to "AUTO_PRESERVE_ORDER".
 */
export type CohereChatPromptTruncation = 'OFF' | 'AUTO_PRESERVE_ORDER';

/**
 * Request shape for Cohere Python SDK Streamed Chat.
 * See: https://github.com/cohere-ai/cohere-python/blob/main/src/cohere/base_client.py#L1629
 */
export type CohereChatRequest = {
    message: string;
    chat_history?: (Array<ChatMessage> | null);
    conversation_id?: string;
    tools?: (Array<Tool> | null);
    documents?: Array<{
        [key: string]: unknown;
    }>;
    model?: (string | null);
    temperature?: (number | null);
    k?: (number | null);
    p?: (number | null);
    preamble?: (string | null);
    file_ids?: (Array<(string)> | null);
    search_queries_only?: (boolean | null);
    max_tokens?: (number | null);
    seed?: (number | null);
    stop_sequences?: (Array<(string)> | null);
    presence_penalty?: (number | null);
    frequency_penalty?: (number | null);
    prompt_truncation?: CohereChatPromptTruncation;
    tool_results?: (Array<{
    [key: string]: unknown;
}> | null);
    force_single_step?: (boolean | null);
    agent_id?: (string | null);
};

export type ConversationFilePublic = {
    id: string;
    created_at: string;
    updated_at: string;
    conversation_id: string;
    file_name: string;
    file_size?: number;
};

export type ConversationPublic = {
    id: string;
    created_at: string;
    updated_at: string;
    title: string;
    messages: Array<Message>;
    files: Array<ConversationFilePublic>;
    description: (string | null);
    agent_id: (string | null);
    is_pinned: boolean;
    readonly total_file_size: number;
};

export type ConversationWithoutMessages = {
    id: string;
    created_at: string;
    updated_at: string;
    title: string;
    files: Array<ConversationFilePublic>;
    description: (string | null);
    agent_id: (string | null);
    is_pinned: boolean;
    readonly total_file_size: number;
};

export type CreateAgentRequest = {
    name: string;
    version?: (number | null);
    description?: (string | null);
    preamble?: (string | null);
    temperature?: (number | null);
    tools?: (Array<(string)> | null);
    tools_metadata?: (Array<CreateAgentToolMetadataRequest> | null);
    deployment_config?: ({
    [key: string]: (string);
} | null);
    is_default_deployment?: (boolean | null);
    model: string;
    deployment: string;
    organization_id?: (string | null);
    is_private?: (boolean | null);
};

export type CreateAgentToolMetadataRequest = {
    id?: (string | null);
    tool_name: string;
    artifacts: Array<{
        [key: string]: unknown;
    }>;
};

export type CreateGroup = {
    schemas: Array<(string)>;
    members: Array<GroupMember>;
    displayName: string;
};

export type CreateOrganization = {
    name: string;
};

export type CreateSnapshotRequest = {
    conversation_id: string;
};

export type CreateSnapshotResponse = {
    snapshot_id: string;
    link_id: string;
    messages: Array<Message>;
};

export type CreateStudyRequest = {
    name: string;
    individual_interview_count?: (number | null);
    group_interview_count?: (number | null);
    organization_id?: (string | null);
};

export type DeleteAgent = {
    [key: string]: unknown;
};

export type DeleteAgentFileResponse = {
    [key: string]: unknown;
};

export type DeleteAgentToolMetadata = {
    [key: string]: unknown;
};

export type DeleteConversationFileResponse = {
    [key: string]: unknown;
};

export type DeleteConversationResponse = {
    [key: string]: unknown;
};

export type DeleteDeployment = {
    [key: string]: unknown;
};

export type DeleteModel = {
    [key: string]: unknown;
};

export type DeleteOrganization = {
    [key: string]: unknown;
};

export type DeleteSnapshotLinkResponse = {
    [key: string]: unknown;
};

export type DeleteSnapshotResponse = {
    [key: string]: unknown;
};

export type DeleteStudy = {
    [key: string]: unknown;
};

export type DeleteToolAuth = {
    [key: string]: unknown;
};

export type DeleteUser = {
    [key: string]: unknown;
};

export type Deployment = {
    id?: (string | null);
    name: string;
    models: Array<(string)>;
    is_available?: boolean;
    env_vars: (Array<(string)> | null);
    description?: (string | null);
    is_community?: (boolean | null);
};

export type DeploymentCreate = {
    id?: (string | null);
    name: string;
    description?: (string | null);
    deployment_class_name: string;
    is_community?: boolean;
    default_deployment_config: {
        [key: string]: (string);
    };
};

export type DeploymentUpdate = {
    name?: (string | null);
    description?: (string | null);
    deployment_class_name?: (string | null);
    is_community?: (boolean | null);
    default_deployment_config?: ({
    [key: string]: (string);
} | null);
};

export type DeploymentWithModels = {
    id?: (string | null);
    name: string;
    description?: (string | null);
    is_available?: boolean;
    is_community?: (boolean | null);
    env_vars: (Array<(string)> | null);
    models: Array<ModelSimple>;
};

export type Document = {
    text: string;
    document_id: string;
    title: (string | null);
    url: (string | null);
    fields: ({
    [key: string]: unknown;
} | null);
    tool_name: (string | null);
};

export type Email = {
    primary: boolean;
    value?: (string | null);
    type: string;
};

export type GenerateTitleResponse = {
    title: string;
    error?: (string | null);
};

export type Group = {
    schemas: Array<(string)>;
    members: Array<GroupMember>;
    displayName: string;
    id: string;
    meta: Meta;
};

export type GroupMember = {
    value: string;
    display: string;
};

export type GroupOperation = {
    op: string;
    path?: (string | null);
    value: ({
    [key: string]: (string);
} | Array<{
    [key: string]: (string);
}>);
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type JWTResponse = {
    token: string;
};

export type ListAuthStrategy = {
    strategy: string;
    client_id: (string | null);
    authorization_endpoint: (string | null);
    pkce_enabled: boolean;
};

export type ListConversationFile = {
    id: string;
    created_at: string;
    updated_at: string;
    conversation_id: string;
    file_name: string;
    file_size?: number;
};

export type ListGroupResponse = {
    totalResults: number;
    startIndex: number;
    itemsPerPage: number;
    Resources: Array<Group>;
};

export type ListUserResponse = {
    totalResults: number;
    startIndex: number;
    itemsPerPage: number;
    Resources: Array<backend__schemas__scim__User>;
};

export type Login = {
    strategy: string;
    payload?: ({
    [key: string]: (string);
} | null);
};

export type Logout = {
    [key: string]: unknown;
};

export type ManagedTool = {
    name?: (string | null);
    display_name?: string;
    description?: (string | null);
    parameter_definitions?: ({
    [key: string]: unknown;
} | null);
    kwargs?: {
        [key: string]: unknown;
    };
    is_visible?: boolean;
    is_available?: boolean;
    error_message?: (string | null);
    category?: Category;
    is_auth_required?: boolean;
    auth_url?: (string | null);
    token?: (string | null);
};

export type Message = {
    text: string;
    id: string;
    created_at: string;
    updated_at: string;
    generation_id: (string | null);
    position: number;
    is_active: boolean;
    documents: Array<Document>;
    citations: Array<Citation>;
    files: Array<ConversationFilePublic>;
    tool_calls: Array<ToolCall>;
    tool_plan: (string | null);
    agent: MessageAgent;
};

export type MessageAgent = 'USER' | 'CHATBOT';

export type Meta = {
    resourceType: string;
    created: string;
    lastModified: string;
};

export type Model = {
    id: string;
    name: string;
    deployment_id: string;
    cohere_name: (string | null);
    description: (string | null);
};

export type ModelCreate = {
    name: string;
    cohere_name: (string | null);
    description: (string | null);
    deployment_id: string;
};

export type ModelSimple = {
    id: string;
    name: string;
    cohere_name: (string | null);
    description: (string | null);
};

export type ModelUpdate = {
    name?: (string | null);
    cohere_name?: (string | null);
    description?: (string | null);
    deployment_id?: (string | null);
};

export type Name = {
    givenName: string;
    familyName: string;
};

export type NonStreamedChatResponse = {
    response_id: (string | null);
    generation_id: (string | null);
    chat_history: (Array<ChatMessage> | null);
    finish_reason: string;
    text: string;
    citations?: (Array<Citation> | null);
    documents?: (Array<Document> | null);
    search_results?: (Array<{
    [key: string]: unknown;
}> | null);
    search_queries?: (Array<SearchQuery> | null);
    conversation_id: (string | null);
    tool_calls?: (Array<ToolCall> | null);
    error?: (string | null);
};

export type Operation = {
    op: string;
    value: {
        [key: string]: (boolean);
    };
};

export type Organization = {
    name: string;
    id: string;
    created_at: string;
    updated_at: string;
};

export type PatchGroup = {
    schemas: Array<(string)>;
    operations: Array<GroupOperation>;
};

export type PatchUser = {
    schemas: Array<(string)>;
    operations: Array<Operation>;
};

export type SearchQuery = {
    text: string;
    generation_id: string;
};

export type SnapshotData = {
    title: string;
    description: string;
    messages: Array<Message>;
};

export type SnapshotPublic = {
    conversation_id: string;
    id: string;
    last_message_id: string;
    version: number;
    created_at: string;
    updated_at: string;
    snapshot: SnapshotData;
};

export type SnapshotWithLinks = {
    conversation_id: string;
    id: string;
    last_message_id: string;
    version: number;
    created_at: string;
    updated_at: string;
    snapshot: SnapshotData;
    links: Array<(string)>;
};

/**
 * Stream citation generation event.
 */
export type StreamCitationGeneration = {
    citations?: Array<Citation>;
};

export type StreamEnd = {
    message_id?: (string | null);
    response_id?: (string | null);
    generation_id?: (string | null);
    conversation_id?: (string | null);
    text: string;
    citations?: Array<Citation>;
    documents?: Array<Document>;
    search_results?: Array<{
        [key: string]: unknown;
    }>;
    search_queries?: Array<SearchQuery>;
    tool_calls?: Array<ToolCall>;
    finish_reason?: (string | null);
    chat_history?: (Array<ChatMessage> | null);
    error?: (string | null);
};

/**
 * Stream Events returned by Cohere's chat stream response.
 */
export type StreamEvent = 'stream-start' | 'search-queries-generation' | 'search-results' | 'tool-input' | 'tool-result' | 'text-generation' | 'citation-generation' | 'stream-end' | 'non-streamed-chat-response' | 'tool-calls-generation' | 'tool-calls-chunk';

/**
 * Stream query generation event.
 */
export type StreamQueryGeneration = {
    query: string;
};

/**
 * Stream queries generation event.
 */
export type StreamSearchQueriesGeneration = {
    search_queries?: Array<SearchQuery>;
};

export type StreamSearchResults = {
    search_results?: Array<{
        [key: string]: unknown;
    }>;
    documents?: Array<Document>;
};

/**
 * Stream start event.
 */
export type StreamStart = {
    generation_id?: (string | null);
    conversation_id?: (string | null);
};

/**
 * Stream text generation event.
 */
export type StreamTextGeneration = {
    text: string;
};

export type StreamToolCallsChunk = {
    tool_call_delta?: (ToolCallDelta | null);
    text: (string | null);
};

/**
 * Stream tool calls generation event.
 */
export type StreamToolCallsGeneration = {
    stream_search_results?: (StreamSearchResults | null);
    tool_calls?: (Array<ToolCall> | null);
    text: (string | null);
};

export type StreamToolInput = {
    input_type: ToolInputType;
    tool_name: string;
    input: string;
    text: string;
};

export type StreamToolResult = {
    result: unknown;
    tool_name: string;
    documents?: Array<Document>;
};

export type Study = {
    user_id: string;
    id: string;
    created_at: string;
    updated_at: string;
    name: string;
    individual_interview_count?: number;
    group_interview_count?: number;
};

export type ToggleConversationPinRequest = {
    is_pinned: boolean;
};

export type Tool = {
    name?: (string | null);
    display_name?: string;
    description?: (string | null);
    parameter_definitions?: ({
    [key: string]: unknown;
} | null);
};

export type ToolCall = {
    name: string;
    parameters?: {
        [key: string]: unknown;
    };
};

export type ToolCallDelta = {
    name: (string | null);
    index: (number | null);
    parameters: (string | null);
};

/**
 * Type of input passed to the tool
 */
export type ToolInputType = 'QUERY' | 'CODE';

export type UpdateAgentRequest = {
    name?: (string | null);
    version?: (number | null);
    description?: (string | null);
    preamble?: (string | null);
    temperature?: (number | null);
    model?: (string | null);
    deployment?: (string | null);
    deployment_config?: ({
    [key: string]: (string);
} | null);
    is_default_deployment?: (boolean | null);
    is_default_model?: (boolean | null);
    organization_id?: (string | null);
    tools?: (Array<(string)> | null);
    tools_metadata?: (Array<CreateAgentToolMetadataRequest> | null);
    is_private?: (boolean | null);
};

export type UpdateAgentToolMetadataRequest = {
    id?: (string | null);
    tool_name?: (string | null);
    artifacts?: (Array<{
    [key: string]: unknown;
}> | null);
};

export type UpdateConversationRequest = {
    title?: (string | null);
    description?: (string | null);
};

export type UpdateDeploymentEnv = {
    env_vars: {
        [key: string]: (string);
    };
};

export type UpdateOrganization = {
    name: (string | null);
};

export type UpdateStudyRequest = {
    name?: (string | null);
    individual_interview_count?: (number | null);
    group_interview_count?: (number | null);
    organization_id?: (string | null);
};

export type UploadAgentFileResponse = {
    id: string;
    created_at: string;
    updated_at: string;
    file_name: string;
    file_size?: number;
};

export type UploadConversationFileResponse = {
    id: string;
    created_at: string;
    updated_at: string;
    conversation_id: string;
    file_name: string;
    file_size?: number;
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type GetStrategiesV1AuthStrategiesGetResponse = (Array<ListAuthStrategy>);

export type LoginV1LoginPostData = {
    requestBody: Login;
};

export type LoginV1LoginPostResponse = ((JWTResponse | null));

export type AuthorizeV1StrategyAuthPostData = {
    code?: string;
    strategy: string;
};

export type AuthorizeV1StrategyAuthPostResponse = (JWTResponse);

export type LogoutV1LogoutGetResponse = (Logout);

export type ToolAuthV1ToolAuthGetResponse = (unknown);

export type DeleteToolAuthV1ToolAuthToolIdDeleteData = {
    toolId: string;
};

export type DeleteToolAuthV1ToolAuthToolIdDeleteResponse = (DeleteToolAuth);

export type ChatStreamV1ChatStreamPostData = {
    requestBody: CohereChatRequest;
};

export type ChatStreamV1ChatStreamPostResponse = (Array<ChatResponseEvent>);

export type RegenerateChatStreamV1ChatStreamRegeneratePostData = {
    requestBody: CohereChatRequest;
};

export type RegenerateChatStreamV1ChatStreamRegeneratePostResponse = (unknown);

export type ChatV1ChatPostData = {
    requestBody: CohereChatRequest;
};

export type ChatV1ChatPostResponse = (NonStreamedChatResponse);

export type CreateUserV1UsersPostData = {
    requestBody: backend__schemas__user__CreateUser;
};

export type CreateUserV1UsersPostResponse = (backend__schemas__user__User);

export type ListUsersV1UsersGetData = {
    limit?: number;
    offset?: number;
};

export type ListUsersV1UsersGetResponse = (Array<backend__schemas__user__User>);

export type GetUserV1UsersUserIdGetData = {
    userId: string;
};

export type GetUserV1UsersUserIdGetResponse = (backend__schemas__user__User);

export type UpdateUserV1UsersUserIdPutData = {
    requestBody: backend__schemas__user__UpdateUser;
    userId: string;
};

export type UpdateUserV1UsersUserIdPutResponse = (backend__schemas__user__User);

export type DeleteUserV1UsersUserIdDeleteData = {
    userId: string;
};

export type DeleteUserV1UsersUserIdDeleteResponse = (DeleteUser);

export type GetConversationV1ConversationsConversationIdGetData = {
    conversationId: string;
};

export type GetConversationV1ConversationsConversationIdGetResponse = (ConversationPublic);

export type UpdateConversationV1ConversationsConversationIdPutData = {
    conversationId: string;
    requestBody: UpdateConversationRequest;
};

export type UpdateConversationV1ConversationsConversationIdPutResponse = (ConversationPublic);

export type DeleteConversationV1ConversationsConversationIdDeleteData = {
    conversationId: string;
};

export type DeleteConversationV1ConversationsConversationIdDeleteResponse = (DeleteConversationResponse);

export type ListConversationsV1ConversationsGetData = {
    agentId?: string;
    limit?: number;
    offset?: number;
    orderBy?: string;
};

export type ListConversationsV1ConversationsGetResponse = (Array<ConversationWithoutMessages>);

export type ToggleConversationPinV1ConversationsConversationIdTogglePinPutData = {
    conversationId: string;
    requestBody: ToggleConversationPinRequest;
};

export type ToggleConversationPinV1ConversationsConversationIdTogglePinPutResponse = (ConversationWithoutMessages);

export type SearchConversationsV1ConversationsSearchGetData = {
    agentId?: string;
    limit?: number;
    offset?: number;
    query: string;
};

export type SearchConversationsV1ConversationsSearchGetResponse = (Array<ConversationWithoutMessages>);

export type BatchUploadFileV1ConversationsBatchUploadFilePostData = {
    formData: Body_batch_upload_file_v1_conversations_batch_upload_file_post;
};

export type BatchUploadFileV1ConversationsBatchUploadFilePostResponse = (Array<UploadConversationFileResponse>);

export type ListFilesV1ConversationsConversationIdFilesGetData = {
    conversationId: string;
};

export type ListFilesV1ConversationsConversationIdFilesGetResponse = (Array<ListConversationFile>);

export type DeleteFileV1ConversationsConversationIdFilesFileIdDeleteData = {
    conversationId: string;
    fileId: string;
};

export type DeleteFileV1ConversationsConversationIdFilesFileIdDeleteResponse = (DeleteConversationFileResponse);

export type GenerateTitleV1ConversationsConversationIdGenerateTitlePostData = {
    conversationId: string;
    model?: (string | null);
};

export type GenerateTitleV1ConversationsConversationIdGenerateTitlePostResponse = (GenerateTitleResponse);

export type SynthesizeMessageV1ConversationsConversationIdSynthesizeMessageIdGetData = {
    conversationId: string;
    messageId: string;
};

export type SynthesizeMessageV1ConversationsConversationIdSynthesizeMessageIdGetResponse = (unknown);

export type ListToolsV1ToolsGetData = {
    agentId?: (string | null);
};

export type ListToolsV1ToolsGetResponse = (Array<ManagedTool>);

export type CreateDeploymentV1DeploymentsPostData = {
    requestBody: DeploymentCreate;
};

export type CreateDeploymentV1DeploymentsPostResponse = (Deployment);

export type ListDeploymentsV1DeploymentsGetData = {
    all?: boolean;
};

export type ListDeploymentsV1DeploymentsGetResponse = (Array<Deployment>);

export type UpdateDeploymentV1DeploymentsDeploymentIdPutData = {
    deploymentId: string;
    requestBody: DeploymentUpdate;
};

export type UpdateDeploymentV1DeploymentsDeploymentIdPutResponse = (Deployment);

export type GetDeploymentV1DeploymentsDeploymentIdGetData = {
    deploymentId: string;
};

export type GetDeploymentV1DeploymentsDeploymentIdGetResponse = (Deployment);

export type DeleteDeploymentV1DeploymentsDeploymentIdDeleteData = {
    deploymentId: string;
};

export type DeleteDeploymentV1DeploymentsDeploymentIdDeleteResponse = (DeleteDeployment);

export type SetEnvVarsV1DeploymentsNameSetEnvVarsPostData = {
    name: string;
    requestBody: UpdateDeploymentEnv;
};

export type SetEnvVarsV1DeploymentsNameSetEnvVarsPostResponse = (unknown);

export type ListExperimentalFeaturesV1ExperimentalFeaturesGetResponse = ({
    [key: string]: (boolean);
});

export type CreateAgentV1AgentsPostData = {
    requestBody: CreateAgentRequest;
};

export type CreateAgentV1AgentsPostResponse = (AgentPublic);

export type ListAgentsV1AgentsGetData = {
    limit?: number;
    offset?: number;
    organizationId?: (string | null);
    visibility?: AgentVisibility;
};

export type ListAgentsV1AgentsGetResponse = (Array<AgentPublic>);

export type GetAgentByIdV1AgentsAgentIdGetData = {
    agentId: string;
};

export type GetAgentByIdV1AgentsAgentIdGetResponse = (AgentPublic);

export type UpdateAgentV1AgentsAgentIdPutData = {
    agentId: string;
    requestBody: UpdateAgentRequest;
};

export type UpdateAgentV1AgentsAgentIdPutResponse = (AgentPublic);

export type DeleteAgentV1AgentsAgentIdDeleteData = {
    agentId: string;
};

export type DeleteAgentV1AgentsAgentIdDeleteResponse = (DeleteAgent);

export type GetAgentDeploymentsV1AgentsAgentIdDeploymentsGetData = {
    agentId: string;
};

export type GetAgentDeploymentsV1AgentsAgentIdDeploymentsGetResponse = (Array<Deployment>);

export type ListAgentToolMetadataV1AgentsAgentIdToolMetadataGetData = {
    agentId: string;
};

export type ListAgentToolMetadataV1AgentsAgentIdToolMetadataGetResponse = (Array<AgentToolMetadataPublic>);

export type CreateAgentToolMetadataV1AgentsAgentIdToolMetadataPostData = {
    agentId: string;
    requestBody: CreateAgentToolMetadataRequest;
};

export type CreateAgentToolMetadataV1AgentsAgentIdToolMetadataPostResponse = (AgentToolMetadataPublic);

export type UpdateAgentToolMetadataV1AgentsAgentIdToolMetadataAgentToolMetadataIdPutData = {
    agentId: string;
    agentToolMetadataId: string;
    requestBody: UpdateAgentToolMetadataRequest;
};

export type UpdateAgentToolMetadataV1AgentsAgentIdToolMetadataAgentToolMetadataIdPutResponse = (AgentToolMetadata);

export type DeleteAgentToolMetadataV1AgentsAgentIdToolMetadataAgentToolMetadataIdDeleteData = {
    agentId: string;
    agentToolMetadataId: string;
};

export type DeleteAgentToolMetadataV1AgentsAgentIdToolMetadataAgentToolMetadataIdDeleteResponse = (DeleteAgentToolMetadata);

export type BatchUploadFileV1AgentsBatchUploadFilePostData = {
    formData: Body_batch_upload_file_v1_agents_batch_upload_file_post;
};

export type BatchUploadFileV1AgentsBatchUploadFilePostResponse = (Array<UploadAgentFileResponse>);

export type DeleteAgentFileV1AgentsAgentIdFilesFileIdDeleteData = {
    agentId: string;
    fileId: string;
};

export type DeleteAgentFileV1AgentsAgentIdFilesFileIdDeleteResponse = (DeleteAgentFileResponse);

export type ListSnapshotsV1SnapshotsGetResponse = (Array<SnapshotWithLinks>);

export type CreateSnapshotV1SnapshotsPostData = {
    requestBody: CreateSnapshotRequest;
};

export type CreateSnapshotV1SnapshotsPostResponse = (CreateSnapshotResponse);

export type GetSnapshotV1SnapshotsLinkLinkIdGetData = {
    linkId: string;
};

export type GetSnapshotV1SnapshotsLinkLinkIdGetResponse = (SnapshotPublic);

export type DeleteSnapshotLinkV1SnapshotsLinkLinkIdDeleteData = {
    linkId: string;
};

export type DeleteSnapshotLinkV1SnapshotsLinkLinkIdDeleteResponse = (DeleteSnapshotLinkResponse);

export type DeleteSnapshotV1SnapshotsSnapshotIdDeleteData = {
    snapshotId: string;
};

export type DeleteSnapshotV1SnapshotsSnapshotIdDeleteResponse = (DeleteSnapshotResponse);

export type CreateStudyV1StudiesPostData = {
    requestBody: CreateStudyRequest;
};

export type CreateStudyV1StudiesPostResponse = (Study);

export type ListStudiesV1StudiesGetData = {
    limit?: number;
    offset?: number;
    organizationId?: (string | null);
};

export type ListStudiesV1StudiesGetResponse = (Array<Study>);

export type GetStudyByIdV1StudiesStudyIdGetData = {
    studyId: string;
};

export type GetStudyByIdV1StudiesStudyIdGetResponse = (Study);

export type UpdateStudyV1StudiesStudyIdPutData = {
    requestBody: UpdateStudyRequest;
    studyId: string;
};

export type UpdateStudyV1StudiesStudyIdPutResponse = (Study);

export type DeleteStudyV1StudiesStudyIdDeleteData = {
    studyId: string;
};

export type DeleteStudyV1StudiesStudyIdDeleteResponse = (DeleteStudy);

export type ListOrganizationsV1OrganizationsGetResponse = (Array<Organization>);

export type CreateOrganizationV1OrganizationsPostData = {
    requestBody: CreateOrganization;
};

export type CreateOrganizationV1OrganizationsPostResponse = (Organization);

export type UpdateOrganizationV1OrganizationsOrganizationIdPutData = {
    organizationId: string;
    requestBody: UpdateOrganization;
};

export type UpdateOrganizationV1OrganizationsOrganizationIdPutResponse = (Organization);

export type GetOrganizationV1OrganizationsOrganizationIdGetData = {
    organizationId: string;
};

export type GetOrganizationV1OrganizationsOrganizationIdGetResponse = (Organization);

export type DeleteOrganizationV1OrganizationsOrganizationIdDeleteData = {
    organizationId: string;
};

export type DeleteOrganizationV1OrganizationsOrganizationIdDeleteResponse = (DeleteOrganization);

export type GetOrganizationUsersV1OrganizationsOrganizationIdUsersGetData = {
    organizationId: string;
};

export type GetOrganizationUsersV1OrganizationsOrganizationIdUsersGetResponse = (Array<backend__schemas__user__User>);

export type CreateModelV1ModelsPostData = {
    requestBody: ModelCreate;
};

export type CreateModelV1ModelsPostResponse = (Model);

export type ListModelsV1ModelsGetData = {
    limit?: number;
    offset?: number;
};

export type ListModelsV1ModelsGetResponse = (Array<Model>);

export type UpdateModelV1ModelsModelIdPutData = {
    modelId: string;
    requestBody: ModelUpdate;
};

export type UpdateModelV1ModelsModelIdPutResponse = (Model);

export type GetModelV1ModelsModelIdGetData = {
    modelId: string;
};

export type GetModelV1ModelsModelIdGetResponse = (Model);

export type DeleteModelV1ModelsModelIdDeleteData = {
    modelId: string;
};

export type DeleteModelV1ModelsModelIdDeleteResponse = (DeleteModel);

export type GetUsersScimV2UsersGetData = {
    count?: number;
    filter?: (string | null);
    startIndex?: number;
};

export type GetUsersScimV2UsersGetResponse = (ListUserResponse);

export type CreateUserScimV2UsersPostData = {
    requestBody: backend__schemas__scim__CreateUser;
};

export type CreateUserScimV2UsersPostResponse = (unknown);

export type GetUserScimV2UsersUserIdGetData = {
    userId: string;
};

export type GetUserScimV2UsersUserIdGetResponse = (unknown);

export type UpdateUserScimV2UsersUserIdPutData = {
    requestBody: backend__schemas__scim__UpdateUser;
    userId: string;
};

export type UpdateUserScimV2UsersUserIdPutResponse = (unknown);

export type PatchUserScimV2UsersUserIdPatchData = {
    requestBody: PatchUser;
    userId: string;
};

export type PatchUserScimV2UsersUserIdPatchResponse = (unknown);

export type GetGroupsScimV2GroupsGetData = {
    count?: number;
    filter?: (string | null);
    startIndex?: number;
};

export type GetGroupsScimV2GroupsGetResponse = (ListGroupResponse);

export type CreateGroupScimV2GroupsPostData = {
    requestBody: CreateGroup;
};

export type CreateGroupScimV2GroupsPostResponse = (unknown);

export type GetGroupScimV2GroupsGroupIdGetData = {
    groupId: string;
};

export type GetGroupScimV2GroupsGroupIdGetResponse = (unknown);

export type PatchGroupScimV2GroupsGroupIdPatchData = {
    groupId: string;
    requestBody: PatchGroup;
};

export type PatchGroupScimV2GroupsGroupIdPatchResponse = (unknown);

export type DeleteGroupScimV2GroupsGroupIdDeleteData = {
    groupId: string;
};

export type DeleteGroupScimV2GroupsGroupIdDeleteResponse = (void);

export type HealthHealthGetResponse = (unknown);

export type ApplyMigrationsMigratePostResponse = (unknown);