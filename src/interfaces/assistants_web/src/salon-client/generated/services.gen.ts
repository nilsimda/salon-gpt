// This file is auto-generated by @hey-api/openapi-ts
import type { BaseHttpRequest } from './core/BaseHttpRequest';
import type { CancelablePromise } from './core/CancelablePromise';
import type {
  ApplyMigrationsMigratePostResponse,
  AuthorizeV1StrategyAuthPostData,
  AuthorizeV1StrategyAuthPostResponse,
  ChatStreamV1ChatStreamPostData,
  ChatStreamV1ChatStreamPostResponse,
  CreateGroupScimV2GroupsPostData,
  CreateGroupScimV2GroupsPostResponse,
  CreateStudyV1StudiesPostData,
  CreateStudyV1StudiesPostResponse,
  CreateUserScimV2UsersPostData,
  CreateUserScimV2UsersPostResponse,
  CreateUserV1UsersPostData,
  CreateUserV1UsersPostResponse,
  DeleteConversationV1ConversationsConversationIdDeleteData,
  DeleteConversationV1ConversationsConversationIdDeleteResponse,
  DeleteGroupScimV2GroupsGroupIdDeleteData,
  DeleteGroupScimV2GroupsGroupIdDeleteResponse,
  DeleteStudyV1StudiesStudyIdDeleteData,
  DeleteStudyV1StudiesStudyIdDeleteResponse,
  DeleteUserV1UsersUserIdDeleteData,
  DeleteUserV1UsersUserIdDeleteResponse,
  GenerateTitleV1ConversationsConversationIdGenerateTitlePostData,
  GenerateTitleV1ConversationsConversationIdGenerateTitlePostResponse,
  GetConversationV1ConversationsConversationIdGetData,
  GetConversationV1ConversationsConversationIdGetResponse,
  GetGroupScimV2GroupsGroupIdGetData,
  GetGroupScimV2GroupsGroupIdGetResponse,
  GetGroupsScimV2GroupsGetData,
  GetGroupsScimV2GroupsGetResponse,
  GetStrategiesV1AuthStrategiesGetResponse,
  GetStudyByIdV1StudiesStudyIdGetData,
  GetStudyByIdV1StudiesStudyIdGetResponse,
  GetUserScimV2UsersUserIdGetData,
  GetUserScimV2UsersUserIdGetResponse,
  GetUserV1UsersUserIdGetData,
  GetUserV1UsersUserIdGetResponse,
  GetUsersScimV2UsersGetData,
  GetUsersScimV2UsersGetResponse,
  HealthHealthGetResponse,
  ListConversationsV1ConversationsGetData,
  ListConversationsV1ConversationsGetResponse,
  ListFilesV1StudiesStudyIdInterviewsGetData,
  ListFilesV1StudiesStudyIdInterviewsGetResponse,
  ListStudiesV1StudiesGetData,
  ListStudiesV1StudiesGetResponse,
  ListUsersV1UsersGetData,
  ListUsersV1UsersGetResponse,
  LoginV1LoginPostData,
  LoginV1LoginPostResponse,
  LogoutV1LogoutGetResponse,
  PatchGroupScimV2GroupsGroupIdPatchData,
  PatchGroupScimV2GroupsGroupIdPatchResponse,
  PatchUserScimV2UsersUserIdPatchData,
  PatchUserScimV2UsersUserIdPatchResponse,
  SearchConversationsV1ConversationsSearchGetData,
  SearchConversationsV1ConversationsSearchGetResponse,
  ToggleConversationPinV1ConversationsConversationIdTogglePinPutData,
  ToggleConversationPinV1ConversationsConversationIdTogglePinPutResponse,
  UpdateConversationV1ConversationsConversationIdPutData,
  UpdateConversationV1ConversationsConversationIdPutResponse,
  UpdateStudyV1StudiesStudyIdPutData,
  UpdateStudyV1StudiesStudyIdPutResponse,
  UpdateUserScimV2UsersUserIdPutData,
  UpdateUserScimV2UsersUserIdPutResponse,
  UpdateUserV1UsersUserIdPutData,
  UpdateUserV1UsersUserIdPutResponse,
} from './types.gen';

export class DefaultService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Get Strategies
   * Retrieves the currently enabled list of Authentication strategies.
   *
   * Args:
   * (Context): Context object.
   * Returns:
   * List[dict]: List of dictionaries containing the enabled auth strategy names.
   * @returns ListAuthStrategy Successful Response
   * @throws ApiError
   */
  public getStrategiesV1AuthStrategiesGet(): CancelablePromise<GetStrategiesV1AuthStrategiesGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/auth_strategies',
    });
  }

  /**
   * Login
   * Logs user in, performing basic email/password auth.
   * Verifies their credentials, retrieves the user and returns a JWT token.
   *
   * Args:
   * login (Login): Login payload.
   * session (DBSessionDep): Database session.
   * (Context): Context object.
   *
   * Returns:
   * dict: JWT token on Basic auth success
   *
   * Raises:
   * HTTPException: If the strategy or payload are invalid, or if the login fails.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public loginV1LoginPost(data: LoginV1LoginPostData): CancelablePromise<LoginV1LoginPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/login',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Authorize
   * Callback authorization endpoint used for OAuth providers after authenticating on the provider's login screen.
   *
   * Args:
   * strategy (str): Current strategy name.
   * request (Request): Current Request object.
   * session (Session): DB session.
   * code (str): OAuth code.
   * (Context): Context object.
   *
   * Returns:
   * dict: Containing "token" key, on success.
   *
   * Raises:
   * HTTPException: If authentication fails, or strategy is invalid.
   * @param data The data for the request.
   * @param data.strategy
   * @param data.code
   * @returns JWTResponse Successful Response
   * @throws ApiError
   */
  public authorizeV1StrategyAuthPost(
    data: AuthorizeV1StrategyAuthPostData
  ): CancelablePromise<AuthorizeV1StrategyAuthPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/{strategy}/auth',
      path: {
        strategy: data.strategy,
      },
      query: {
        code: data.code,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Logout
   * Logs out the current user, adding the given JWT token to the blacklist.
   *
   * Args:
   * request (Request): current Request object.
   * session (DBSessionDep): Database session.
   * token (dict): JWT token payload.
   * (Context): Context object.
   *
   * Returns:
   * dict: Empty on success
   * @returns Logout Successful Response
   * @throws ApiError
   */
  public logoutV1LogoutGet(): CancelablePromise<LogoutV1LogoutGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/logout',
    });
  }

  /**
   * Chat Stream
   * Stream chat endpoint to handle user messages and return chatbot responses.
   *
   * Args:
   * session (DBSessionDep): Database session.
   * chat_request (CohereChatRequest): Chat request data.
   * request (Request): Request object.
   * (Context): Context object.
   *
   * Returns:
   * EventSourceResponse: Server-sent event response with chatbot responses.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public chatStreamV1ChatStreamPost(
    data: ChatStreamV1ChatStreamPostData
  ): CancelablePromise<ChatStreamV1ChatStreamPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/chat-stream',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Create User
   * Create a new user.
   *
   * Args:
   * user (CreateUser): User data to be created.
   * session (DBSessionDep): Database session.
   * (Context): Context object.
   *
   * Returns:
   * User: Created user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns backend__schemas__user__User Successful Response
   * @throws ApiError
   */
  public createUserV1UsersPost(
    data: CreateUserV1UsersPostData
  ): CancelablePromise<CreateUserV1UsersPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/users',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * List Users
   * List all users.
   *
   * Args:
   * offset (int): Offset to start the list.
   * limit (int): Limit of users to be listed.
   * session (DBSessionDep): Database session.
   * (Context): Context object.
   *
   * Returns:
   * list[User]: List of users.
   * @param data The data for the request.
   * @param data.offset
   * @param data.limit
   * @returns backend__schemas__user__User Successful Response
   * @throws ApiError
   */
  public listUsersV1UsersGet(
    data: ListUsersV1UsersGetData = {}
  ): CancelablePromise<ListUsersV1UsersGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/users',
      query: {
        offset: data.offset,
        limit: data.limit,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get User
   * Get a user by ID.
   *
   * Args:
   * user_id (str): User ID.
   * session (DBSessionDep): Database session.
   * (Context): Context object.
   *
   * Returns:
   * User: User with the given ID.
   *
   * Raises:
   * HTTPException: If the user with the given ID is not found.
   * @param data The data for the request.
   * @param data.userId
   * @returns backend__schemas__user__User Successful Response
   * @throws ApiError
   */
  public getUserV1UsersUserIdGet(
    data: GetUserV1UsersUserIdGetData
  ): CancelablePromise<GetUserV1UsersUserIdGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/users/{user_id}',
      path: {
        user_id: data.userId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Update User
   * Update a user by ID.
   *
   * Args:
   * user_id (str): User ID.
   * new_user (UpdateUser): New user data.
   * session (DBSessionDep): Database session.
   * request (Request): Request object.
   * (Context): Context object
   *
   * Returns:
   * User: Updated user.
   *
   * Raises:
   * HTTPException: If the user with the given ID is not found.
   * @param data The data for the request.
   * @param data.userId
   * @param data.requestBody
   * @returns backend__schemas__user__User Successful Response
   * @throws ApiError
   */
  public updateUserV1UsersUserIdPut(
    data: UpdateUserV1UsersUserIdPutData
  ): CancelablePromise<UpdateUserV1UsersUserIdPutResponse> {
    return this.httpRequest.request({
      method: 'PUT',
      url: '/v1/users/{user_id}',
      path: {
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Delete User
   * "
   * Delete a user by ID.
   *
   * Args:
   * user_id (str): User ID.
   * session (DBSessionDep): Database session.
   * (Context): Context object.
   *
   * Returns:
   * DeleteUser: Empty response.
   *
   * Raises:
   * HTTPException: If the user with the given ID is not found.
   * @param data The data for the request.
   * @param data.userId
   * @returns DeleteUser Successful Response
   * @throws ApiError
   */
  public deleteUserV1UsersUserIdDelete(
    data: DeleteUserV1UsersUserIdDeleteData
  ): CancelablePromise<DeleteUserV1UsersUserIdDeleteResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/v1/users/{user_id}',
      path: {
        user_id: data.userId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Conversation
   * Get a conversation by ID.
   *
   * Args:
   * conversation_id (str): Conversation ID.
   * session (DBSessionDep): Database session.
   * request (Request): Request object.
   *
   * Returns:
   * Conversation: Conversation with the given ID.
   *
   * Raises:
   * HTTPException: If the conversation with the given ID is not found.
   * @param data The data for the request.
   * @param data.conversationId
   * @param data.userId
   * @returns Conversation Successful Response
   * @throws ApiError
   */
  public getConversationV1ConversationsConversationIdGet(
    data: GetConversationV1ConversationsConversationIdGetData
  ): CancelablePromise<GetConversationV1ConversationsConversationIdGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/conversations/{conversation_id}',
      path: {
        conversation_id: data.conversationId,
      },
      query: {
        user_id: data.userId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Update Conversation
   * Update a conversation by ID.
   *
   * Args:
   * conversation_id (str): Conversation ID.
   * new_conversation (UpdateConversationRequest): New conversation data.
   * session (DBSessionDep): Database session.
   *
   * Returns:
   * Conversation: Updated conversation.
   *
   * Raises:
   * HTTPException: If the conversation with the given ID is not found.
   * @param data The data for the request.
   * @param data.conversationId
   * @param data.userId
   * @param data.requestBody
   * @returns Conversation Successful Response
   * @throws ApiError
   */
  public updateConversationV1ConversationsConversationIdPut(
    data: UpdateConversationV1ConversationsConversationIdPutData
  ): CancelablePromise<UpdateConversationV1ConversationsConversationIdPutResponse> {
    return this.httpRequest.request({
      method: 'PUT',
      url: '/v1/conversations/{conversation_id}',
      path: {
        conversation_id: data.conversationId,
      },
      query: {
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Delete Conversation
   * Delete a conversation by ID.
   *
   * Args:
   * conversation_id (str): Conversation ID.
   * session (DBSessionDep): Database session.
   * (Context): Context object.
   *
   * Returns:
   * DeleteConversationResponse: Empty response.
   *
   * Raises:
   * HTTPException: If the conversation with the given ID is not found.
   * @param data The data for the request.
   * @param data.conversationId
   * @param data.userId
   * @returns DeleteConversationResponse Successful Response
   * @throws ApiError
   */
  public deleteConversationV1ConversationsConversationIdDelete(
    data: DeleteConversationV1ConversationsConversationIdDeleteData
  ): CancelablePromise<DeleteConversationV1ConversationsConversationIdDeleteResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/v1/conversations/{conversation_id}',
      path: {
        conversation_id: data.conversationId,
      },
      query: {
        user_id: data.userId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * List Conversations
   * List all conversations.
   *
   * Args:
   * offset (int): Offset to start the list.
   * limit (int): Limit of conversations to be listed.
   * order_by (str): A field by which to order the conversations.
   * agent_id (str): Query parameter for agent ID to optionally filter conversations by agent.
   * session (DBSessionDep): Database session.
   * request (Request): Request object.
   *
   * Returns:
   * list[ConversationWithoutMessages]: List of conversations.
   * @param data The data for the request.
   * @param data.userId
   * @param data.offset
   * @param data.limit
   * @param data.orderBy
   * @param data.agentId
   * @returns ConversationWithoutMessages Successful Response
   * @throws ApiError
   */
  public listConversationsV1ConversationsGet(
    data: ListConversationsV1ConversationsGetData
  ): CancelablePromise<ListConversationsV1ConversationsGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/conversations',
      query: {
        user_id: data.userId,
        offset: data.offset,
        limit: data.limit,
        order_by: data.orderBy,
        agent_id: data.agentId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Toggle Conversation Pin
   * @param data The data for the request.
   * @param data.conversationId
   * @param data.userId
   * @param data.requestBody
   * @returns ConversationWithoutMessages Successful Response
   * @throws ApiError
   */
  public toggleConversationPinV1ConversationsConversationIdTogglePinPut(
    data: ToggleConversationPinV1ConversationsConversationIdTogglePinPutData
  ): CancelablePromise<ToggleConversationPinV1ConversationsConversationIdTogglePinPutResponse> {
    return this.httpRequest.request({
      method: 'PUT',
      url: '/v1/conversations/{conversation_id}/toggle-pin',
      path: {
        conversation_id: data.conversationId,
      },
      query: {
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Search Conversations
   * Search conversations by title.
   *
   * Args:
   * query (str): Query string to search for in conversation titles.
   * session (DBSessionDep): Database session.
   * request (Request): Request object.
   * offset (int): Offset to start the list.
   * limit (int): Limit of conversations to be listed.
   * agent_id (str): Query parameter for agent ID to optionally filter conversations by agent.
   * (Context): Context object.
   *
   * Returns:
   * list[ConversationWithoutMessages]: List of conversations that match the query.
   * @param data The data for the request.
   * @param data.query
   * @param data.userId
   * @param data.offset
   * @param data.limit
   * @param data.agentId
   * @returns ConversationWithoutMessages Successful Response
   * @throws ApiError
   */
  public searchConversationsV1ConversationsSearchGet(
    data: SearchConversationsV1ConversationsSearchGetData
  ): CancelablePromise<SearchConversationsV1ConversationsSearchGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/conversations:search',
      query: {
        query: data.query,
        user_id: data.userId,
        offset: data.offset,
        limit: data.limit,
        agent_id: data.agentId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Generate Title
   * Generate a title for a conversation and update the conversation with the generated title.
   *
   * Args:
   * conversation_id (str): Conversation ID.
   * session (DBSessionDep): Database session.
   * request (Request): Request object.
   * (Context): Context object.
   *
   * Returns:
   * str: Generated title for the conversation.
   *
   * Raises:
   * HTTPException: If the conversation with the given ID is not found.
   * @param data The data for the request.
   * @param data.conversationId
   * @param data.userId
   * @returns GenerateTitleResponse Successful Response
   * @throws ApiError
   */
  public generateTitleV1ConversationsConversationIdGenerateTitlePost(
    data: GenerateTitleV1ConversationsConversationIdGenerateTitlePostData
  ): CancelablePromise<GenerateTitleV1ConversationsConversationIdGenerateTitlePostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/conversations/{conversation_id}/generate-title',
      path: {
        conversation_id: data.conversationId,
      },
      query: {
        user_id: data.userId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Create Study
   * Create a study.
   *
   * Args:
   * session (DBSessionDep): Database session.
   * study (CreateStudyRequest): Study data.
   * (Context): Context object.
   * Returns:
   * Study: Created study with no user ID or organization ID.
   * Raises:
   * HTTPException: If the study creation fails.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Study Successful Response
   * @throws ApiError
   */
  public createStudyV1StudiesPost(
    data: CreateStudyV1StudiesPostData
  ): CancelablePromise<CreateStudyV1StudiesPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/studies',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * List Studies
   * List all studies.
   *
   * Args:
   * offset (int): Offset to start the list.
   * limit (int): Limit of studies to be listed.
   * session (DBSessionDep): Database session.
   * (Context): Context object.
   *
   * Returns:
   * list[Study]: List of studies.
   * @param data The data for the request.
   * @param data.offset
   * @param data.limit
   * @param data.organizationId
   * @returns Study Successful Response
   * @throws ApiError
   */
  public listStudiesV1StudiesGet(
    data: ListStudiesV1StudiesGetData = {}
  ): CancelablePromise<ListStudiesV1StudiesGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/studies',
      query: {
        offset: data.offset,
        limit: data.limit,
        organization_id: data.organizationId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Study By Id
   * Get study by ID.
   *
   * Args:
   * study_id (str): Study ID.
   * session (DBSessionDep): Database session.
   * (Context): Context object.
   *
   * Returns:
   * Study: Study.
   *
   * Raises:
   * HTTPException: If the study is not found.
   * @param data The data for the request.
   * @param data.studyId
   * @returns Study Successful Response
   * @throws ApiError
   */
  public getStudyByIdV1StudiesStudyIdGet(
    data: GetStudyByIdV1StudiesStudyIdGetData
  ): CancelablePromise<GetStudyByIdV1StudiesStudyIdGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/studies/{study_id}',
      path: {
        study_id: data.studyId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Update Study
   * Update a study by ID.
   *
   * Args:
   * study_id (str): Study ID.
   * new_study (UpdateStudyRequest): New study data.
   * session (DBSessionDep): Database session.
   * (Context): Context object.
   *
   * Returns:
   * Study: Updated study.
   *
   * Raises:
   * HTTPException: If the study is not found.
   * @param data The data for the request.
   * @param data.studyId
   * @param data.requestBody
   * @returns Study Successful Response
   * @throws ApiError
   */
  public updateStudyV1StudiesStudyIdPut(
    data: UpdateStudyV1StudiesStudyIdPutData
  ): CancelablePromise<UpdateStudyV1StudiesStudyIdPutResponse> {
    return this.httpRequest.request({
      method: 'PUT',
      url: '/v1/studies/{study_id}',
      path: {
        study_id: data.studyId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Delete Study
   * Delete a study by ID.
   *
   * Args:
   * study_id (str): Study ID.
   * session (DBSessionDep): Database session.
   * (Context): Context object.
   *
   * Returns:
   * DeleteStudy: Empty response.
   *
   * Raises:
   * HTTPException: If the study is not found.
   * @param data The data for the request.
   * @param data.studyId
   * @returns DeleteStudy Successful Response
   * @throws ApiError
   */
  public deleteStudyV1StudiesStudyIdDelete(
    data: DeleteStudyV1StudiesStudyIdDeleteData
  ): CancelablePromise<DeleteStudyV1StudiesStudyIdDeleteResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/v1/studies/{study_id}',
      path: {
        study_id: data.studyId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * List Files
   * List all interviews from a study. Important - no pagination support yet.
   *
   * Args:
   * study_id (str): Study ID.
   * session (DBSessionDep): Database session.
   * (Context): Context object.
   *
   * Returns:
   * list[Interview]: List of interviews from the study.
   *
   * Raises:
   * HTTPException: If the study with the given ID is not found.
   * @param data The data for the request.
   * @param data.studyId
   * @returns Interview Successful Response
   * @throws ApiError
   */
  public listFilesV1StudiesStudyIdInterviewsGet(
    data: ListFilesV1StudiesStudyIdInterviewsGetData
  ): CancelablePromise<ListFilesV1StudiesStudyIdInterviewsGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/studies/{study_id}/interviews',
      path: {
        study_id: data.studyId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Users
   * @param data The data for the request.
   * @param data.count
   * @param data.startIndex
   * @param data.filter
   * @returns ListUserResponse Successful Response
   * @throws ApiError
   */
  public getUsersScimV2UsersGet(
    data: GetUsersScimV2UsersGetData = {}
  ): CancelablePromise<GetUsersScimV2UsersGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/scim/v2/Users',
      query: {
        count: data.count,
        start_index: data.startIndex,
        filter: data.filter,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Create User
   * @param data The data for the request.
   * @param data.requestBody
   * @returns backend__schemas__scim__User Successful Response
   * @throws ApiError
   */
  public createUserScimV2UsersPost(
    data: CreateUserScimV2UsersPostData
  ): CancelablePromise<CreateUserScimV2UsersPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/scim/v2/Users',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get User
   * @param data The data for the request.
   * @param data.userId
   * @returns backend__schemas__scim__User Successful Response
   * @throws ApiError
   */
  public getUserScimV2UsersUserIdGet(
    data: GetUserScimV2UsersUserIdGetData
  ): CancelablePromise<GetUserScimV2UsersUserIdGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/scim/v2/Users/{user_id}',
      path: {
        user_id: data.userId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Update User
   * @param data The data for the request.
   * @param data.userId
   * @param data.requestBody
   * @returns backend__schemas__scim__User Successful Response
   * @throws ApiError
   */
  public updateUserScimV2UsersUserIdPut(
    data: UpdateUserScimV2UsersUserIdPutData
  ): CancelablePromise<UpdateUserScimV2UsersUserIdPutResponse> {
    return this.httpRequest.request({
      method: 'PUT',
      url: '/scim/v2/Users/{user_id}',
      path: {
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Patch User
   * @param data The data for the request.
   * @param data.userId
   * @param data.requestBody
   * @returns backend__schemas__scim__User Successful Response
   * @throws ApiError
   */
  public patchUserScimV2UsersUserIdPatch(
    data: PatchUserScimV2UsersUserIdPatchData
  ): CancelablePromise<PatchUserScimV2UsersUserIdPatchResponse> {
    return this.httpRequest.request({
      method: 'PATCH',
      url: '/scim/v2/Users/{user_id}',
      path: {
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Groups
   * @param data The data for the request.
   * @param data.count
   * @param data.startIndex
   * @param data.filter
   * @returns ListGroupResponse Successful Response
   * @throws ApiError
   */
  public getGroupsScimV2GroupsGet(
    data: GetGroupsScimV2GroupsGetData = {}
  ): CancelablePromise<GetGroupsScimV2GroupsGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/scim/v2/Groups',
      query: {
        count: data.count,
        start_index: data.startIndex,
        filter: data.filter,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Create Group
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Group Successful Response
   * @throws ApiError
   */
  public createGroupScimV2GroupsPost(
    data: CreateGroupScimV2GroupsPostData
  ): CancelablePromise<CreateGroupScimV2GroupsPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/scim/v2/Groups',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Group
   * @param data The data for the request.
   * @param data.groupId
   * @returns Group Successful Response
   * @throws ApiError
   */
  public getGroupScimV2GroupsGroupIdGet(
    data: GetGroupScimV2GroupsGroupIdGetData
  ): CancelablePromise<GetGroupScimV2GroupsGroupIdGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/scim/v2/Groups/{group_id}',
      path: {
        group_id: data.groupId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Patch Group
   * @param data The data for the request.
   * @param data.groupId
   * @param data.requestBody
   * @returns Group Successful Response
   * @throws ApiError
   */
  public patchGroupScimV2GroupsGroupIdPatch(
    data: PatchGroupScimV2GroupsGroupIdPatchData
  ): CancelablePromise<PatchGroupScimV2GroupsGroupIdPatchResponse> {
    return this.httpRequest.request({
      method: 'PATCH',
      url: '/scim/v2/Groups/{group_id}',
      path: {
        group_id: data.groupId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Delete Group
   * @param data The data for the request.
   * @param data.groupId
   * @returns void Successful Response
   * @throws ApiError
   */
  public deleteGroupScimV2GroupsGroupIdDelete(
    data: DeleteGroupScimV2GroupsGroupIdDeleteData
  ): CancelablePromise<DeleteGroupScimV2GroupsGroupIdDeleteResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/scim/v2/Groups/{group_id}',
      path: {
        group_id: data.groupId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Health
   * Health check for backend APIs
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public healthHealthGet(): CancelablePromise<HealthHealthGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/health',
    });
  }

  /**
   * Apply Migrations
   * Applies Alembic migrations - useful for serverless applications
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public applyMigrationsMigratePost(): CancelablePromise<ApplyMigrationsMigratePostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/migrate',
    });
  }
}
